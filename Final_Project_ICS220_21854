import tkinter as tk
from tkinter import messagebox, ttk
import pickle
import datetime

# Represents a discount on tickets
class Discount:
    def __init__(self, value):
        self.value = value

    def apply_discount(self, price):
        return price - (price * self.value / 100)

# Represents a ticket type
class Ticket:
    def __init__(self, ticket_type, price, validity, features, discount=None):
        self.ticket_type = ticket_type
        self.price = price
        self.validity = validity
        self.features = features
        self.discount = discount

    def final_price(self):
        return self.discount.apply_discount(self.price) if self.discount else self.price

# Represents a user account
class Account:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
        self.purchase_history = []

    def add_ticket(self, ticket):
        self.purchase_history.append(ticket)

    def delete_ticket(self, index):
        if 0 <= index < len(self.purchase_history):
            del self.purchase_history[index]

# Handles data storage and retrieval
class BookingSystem:
    def __init__(self):
        self.accounts = []

    def save(self):
        with open("datas.pkl", "wb") as file:
            pickle.dump(self, file)

    def load(self):
        try:
            with open("datas.pkl", "rb") as file:
                return pickle.load(file)
        except FileNotFoundError:
            return self

# Main application class
class TicketApp:
    def __init__(self, root):
        booking_system = BookingSystem()
        self.system = booking_system.load()
        self.root = root
        self.root.title("Ticket Booking System")
        self.root.configure(bg="white")
        self.center_window(600, 700)
        self.style = ttk.Style()
        self.style.configure("TButton", font=("Arial", 12), background="gold")
        self.main_menu()

    def center_window(self, width, height):
        # Centers the window on the screen
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        self.root.geometry(f"{width}x{height}+{x}+{y}")

    def clear_screen(self):
        # Clears the current window
        for widget in self.root.winfo_children():
            widget.destroy()

    def validate_email(self, email):
        # Checks email format
        return "@" in email and "." in email

    def validate_password(self, password):
        # Ensures password is at least 7 characters
        return len(password) >= 7

    def main_menu(self):
        # Main menu options
        self.clear_screen()
        ttk.Label(self.root, text="Ticket Booking System", font=("Arial", 24, "bold"), background="white").pack(pady=20)

        ttk.Button(self.root, text="Create Account", command=self.create_account).pack(pady=10)
        ttk.Button(self.root, text="Login", command=self.login_screen).pack(pady=10)
        ttk.Button(self.root, text="Admin Dashboard", command=self.admin_dashboard).pack(pady=10)
        ttk.Button(self.root, text="Exit", command=self.root.quit).pack(pady=10)

    def create_account(self):
        # Allows user to create an account
        self.clear_screen()
        ttk.Label(self.root, text="Create Account", font=("Arial", 20), background="white").pack(pady=20)

        ttk.Label(self.root, text="Username:").pack(pady=5)
        username = ttk.Entry(self.root)
        username.pack(pady=5)

        ttk.Label(self.root, text="Password:").pack(pady=5)
        password = ttk.Entry(self.root, show="*")
        password.pack(pady=5)

        ttk.Label(self.root, text="Email:").pack(pady=5)
        email = ttk.Entry(self.root)
        email.pack(pady=5)

        def save_account():
            # Validates and saves account details
            if not self.validate_email(email.get()):
                messagebox.showerror("Error", "Invalid email format.")
            elif not self.validate_password(password.get()):
                messagebox.showerror("Error", "Password must be at least 7 characters.")
            elif any(acc.username == username.get() for acc in self.system.accounts):
                messagebox.showerror("Error", "Username already exists! Please choose a different username.")
            else:
                account = Account(username.get(), password.get(), email.get())
                self.system.accounts.append(account)
                self.system.save()
                messagebox.showinfo("Success", "Account created successfully!")
                self.main_menu()

        ttk.Button(self.root, text="Create Account", command=save_account).pack(pady=10)
        ttk.Button(self.root, text="Back", command=self.main_menu).pack(pady=10)

    def login_screen(self):
        # Login screen
        self.clear_screen()
        ttk.Label(self.root, text="Login", font=("Arial", 20), background="white").pack(pady=20)
        ttk.Label(self.root, text="Username:").pack(pady=5)
        username = ttk.Entry(self.root)
        username.pack(pady=5)

        ttk.Label(self.root, text="Password:").pack(pady=5)
        password = ttk.Entry(self.root, show="*")
        password.pack(pady=5)

        def login():
            # Validates login credentials
            account = next((acc for acc in self.system.accounts if acc.username == username.get()), None)

            if account:
                if account.password == password.get():
                    messagebox.showinfo("Success", "Login successful!")
                    self.purchase_tickets(account)
                else:
                    messagebox.showerror("Error", "Incorrect password!")
            else:
                messagebox.showerror("Error", "Account not found!")

        ttk.Button(self.root, text="Login", command=login).pack(pady=10)
        ttk.Button(self.root, text="Back", command=self.main_menu).pack(pady=10)

    def purchase_tickets(self, account):
        # Displays the ticket purchasing interface, allowing users to select a date, purchase individual or group tickets, and apply discounts.
        self.clear_screen()
        ttk.Label(self.root, text="Purchase Tickets", font=("Arial", 20), background="white").pack(pady=20)

        if hasattr(self, 'last_used_date') and self.last_used_date:
            default_date = self.last_used_date
        else:
            default_date = datetime.datetime.now().strftime("%d/%m/%Y")

        ttk.Label(self.root, text="Select Date (DD/MM/YY):").pack(pady=5)

        date_frame = ttk.Frame(self.root)
        date_frame.pack(pady=5)

        date_entry = ttk.Entry(date_frame)
        date_entry.insert(0, default_date)
        date_entry.grid(row=0, column=0)

        tickets = [
            Ticket("Single Day Pass", 275, "1 Day", "Access to rides"),
            Ticket("Two Day Pass", 480, "2 Days", "Access to rides",Discount(10)),
            Ticket("Annual Membership", 1840, "1 Year", "Unlimited rides"),
            Ticket("Child Ticket", 185, "1 Day", "Child fun!"),
            Ticket("VIP Experience Pass", 550, "1 Day", "The VIP experience")
        ]
        is_renewal = tk.BooleanVar()
        renewal_check = ttk.Checkbutton(self.root, text="If you are renewing your annual membership, make sure you check this.", variable=is_renewal)
        renewal_check.pack(pady=5)

        def validate_date():
            # Validates the entered date format (DD/MM/YYYY) and returns it, or shows an error message if invalid.
            try:
                entered_date = datetime.datetime.strptime(date_entry.get(), "%d/%m/%Y").strftime("%d/%m/%Y")
                return entered_date
            except ValueError:
                messagebox.showerror("Error", "Please enter the date in the format DD/MM/YY!")
                return None

        def purchase_ticket(ticket):
            # Processes the purchase of a selected ticket, applies discounts for renewals, and saves the purchase.
            entered_date = validate_date()
            if not entered_date:
                return

            self.last_used_date = entered_date

            if ticket.ticket_type == "VIP Experience Pass" and entered_date == datetime.datetime.now().strftime(
                    "%d/%m/%Y"):
                messagebox.showerror("Error", "VIP tickets must be purchased for a future date!")
                return

            if ticket.ticket_type == "Annual Membership" and is_renewal.get():
                ticket.discount = Discount(15)

            account.add_ticket(ticket)
            self.system.save()
            messagebox.showinfo("Success", f"{ticket.ticket_type} purchased for {entered_date}!")
            self.purchase_tickets(account)

        ttk.Label(self.root, text="Available Tickets:").pack(pady=5)

        for ticket in tickets:
            ttk.Button(
                self.root, text=f"{ticket.ticket_type} - {ticket.price} AED",
                command=lambda t=ticket: purchase_ticket(t)
            ).pack(pady=5)

        def add_group_ticket():
            # Provides functionality for purchasing group tickets by selecting the group size and calculating the total cost.
            group_size = tk.IntVar(value=10)

            def update_group_cost():
                cost_label.config(text=f"Total: {group_size.get() * 220} AED")

            def increment_group():
                group_size.set(group_size.get() + 1)
                update_group_cost()

            def decrement_group():
                if group_size.get() > 10:
                    group_size.set(group_size.get() - 1)
                update_group_cost()

            ttk.Label(self.root, text="Group Ticket (220 AED per person):").pack(pady=5)
            frame = ttk.Frame(self.root)
            frame.pack(pady=5)

            ttk.Button(frame, text="+", command=increment_group).grid(row=0, column=0)
            ttk.Label(frame, textvariable=group_size).grid(row=0, column=1, padx=10)
            ttk.Button(frame, text="-", command=decrement_group).grid(row=0, column=2)

            cost_label = ttk.Label(self.root, text=f"Total: {group_size.get() * 220} AED")
            cost_label.pack(pady=5)

            def confirm_group_ticket():
                # Finalizes the purchase of a group ticket, validates the date, and saves the transaction.
                entered_date = validate_date()
                if not entered_date:
                    return

                group_ticket = Ticket(
                    "Group Pass", group_size.get() * 220, "1 Day",
                    f"Access for {group_size.get()} people"
                )
                account.add_ticket(group_ticket)
                self.system.save()
                messagebox.showinfo("Success", f"Group Ticket purchased for {entered_date}!")
                self.purchase_tickets(account)

            ttk.Button(self.root, text="Add Group Ticket", command=confirm_group_ticket).pack(pady=5)

        add_group_ticket()

        ttk.Button(self.root, text="Back", command=self.main_menu).pack(pady=10)
    def admin_dashboard(self):
        # Displays the admin login screen, validates the password, and navigates to the admin dashboard if successful.
        self.clear_screen()
        ttk.Label(self.root, text="Admin Login", font=("Arial", 20), background="white").pack(pady=20)

        ttk.Label(self.root, text="Enter Admin Password:").pack(pady=5)
        password_entry = ttk.Entry(self.root, show="*")
        password_entry.pack(pady=5)

        def validate_admin():
            if password_entry.get() == "WeLoveMinerva":
                self.admin_dashboard_menu()
            else:
                messagebox.showerror("Error", "Incorrect password!")

        ttk.Button(self.root, text="Login", command=validate_admin).pack(pady=10)
        ttk.Button(self.root, text="Back", command=self.main_menu).pack(pady=10)

    def admin_dashboard_menu(self):
        # Displays the admin dashboard with options to view purchase history, manage user accounts, or return to the main menu.
        self.clear_screen()
        ttk.Label(self.root, text="Admin Dashboard", font=("Arial", 20), background="white").pack(pady=20)

        def view_purchase_history():
            # Shows a list of all purchase histories for all users, allowing admins to review past orders.
            self.clear_screen()
            ttk.Label(self.root, text="Purchase History", font=("Arial", 20), background="white").pack(pady=20)

            history_list = tk.Listbox(self.root, width=60)
            for account in self.system.accounts:
                for idx, order in enumerate(account.purchase_history, start=1):
                    history_list.insert(
                        tk.END,
                        f"Username: {account.username}, Order {idx}: {order.ticket_type} - {order.final_price():.2f} AED"
                    )
            history_list.pack(pady=10)
            ttk.Button(self.root, text="Back", command=self.admin_dashboard_menu).pack(pady=10)
  def manage_accounts():
            # Displays a list of all user accounts, with options to manage or delete selected accounts.
            self.clear_screen()
            ttk.Label(self.root, text="Manage Accounts", font=("Arial", 20), background="white").pack(pady=20)

            accounts_list = tk.Listbox(self.root, width=50)
            for account in self.system.accounts:
                accounts_list.insert(tk.END, f"Username: {account.username}, Email: {account.email}")
            accounts_list.pack(pady=10)

            def manage_account():
                # Opens the account management screen for the selected user, allowing admins to view and manage their orders.
                selected_idx = accounts_list.curselection()
                if not selected_idx:
                    messagebox.showerror("Error", "No account selected!")
                    return

                account = self.system.accounts[selected_idx[0]]
                self.manage_account_screen(account)

            def delete_account():
                # Deletes the selected user account and updates the system records.
                selected_idx = accounts_list.curselection()
                if not selected_idx:
                    messagebox.showerror("Error", "No account selected!")
                    return

                del self.system.accounts[selected_idx[0]]
                self.system.save()
                messagebox.showinfo("Success", "Account deleted successfully!")
                manage_accounts()

            ttk.Button(self.root, text="Manage Selected Account", command=manage_account).pack(pady=10)
            ttk.Button(self.root, text="Delete Account", command=delete_account).pack(pady=10)
            ttk.Button(self.root, text="Back", command=self.admin_dashboard_menu).pack(pady=10)

        ttk.Button(self.root, text="View Purchase History", command=view_purchase_history).pack(pady=10)
        ttk.Button(self.root, text="Manage Accounts", command=manage_accounts).pack(pady=10)
        ttk.Button(self.root, text="Back", command=self.main_menu).pack(pady=10)

    def manage_account_screen(self, account):
        # Displays the management screen for a specific user's account, showing their purchase history and allowing admins to delete orders.
        self.clear_screen()
        ttk.Label(self.root, text=f"Manage {account.username}", font=("Arial", 20), background="white").pack(pady=20)

        orders_list = tk.Listbox(self.root, width=60)
        for idx, order in enumerate(account.purchase_history, start=1):
            orders_list.insert(tk.END, f"Order {idx}: {order.ticket_type} - {order.final_price():.2f} AED")
        orders_list.pack(pady=10)

        def delete_order():
            # Deletes the selected order from a user's purchase history and updates the system.
            selected_idx = orders_list.curselection()
            if not selected_idx:
                messagebox.showerror("Error", "No order selected!")
                return
            account.delete_ticket(selected_idx[0])
            self.system.save()
            messagebox.showinfo("Success", "Order deleted successfully!")
            self.manage_account_screen(account)

        ttk.Button(self.root, text="Delete Selected Order", command=delete_order).pack(pady=10)
        ttk.Button(self.root, text="Back", command=self.admin_dashboard_menu).pack(pady=10)

root = tk.Tk()
app = TicketApp(root)
root.mainloop()
