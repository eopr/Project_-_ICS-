class EBook:
    def __init__(self, title, author, publication_date, genre, price):
        """
        Initializes an EBook with title, author, publication date, genre, and price.
        """
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    def get_title(self):
        """
        Returns the title of the e-book.
        """
        return self._title

    def set_title(self, title):
        """
        Sets a new title for the e-book.
        """
        self._title = title

    def get_author(self):
        """
        Returns the author of the e-book.
        """
        return self._author

    def set_author(self, author):
        """
        Sets a new author for the e-book.
        """
        self._author = author

    def get_publication_date(self):
        """
        Returns the publication date of the e-book.
        """
        return self._publication_date

    def set_publication_date(self, date):
        """
        Sets a new publication date for the e-book.
        """
        self._publication_date = date

    def get_genre(self):
        """
        Returns the genre of the e-book.
        """
        return self._genre

    def set_genre(self, genre):
        """
        Sets a new genre for the e-book.
        """
        self._genre = genre

    def get_price(self):
        """
        Returns the price of the e-book.
        """
        return self._price

    def set_price(self, price):
        """
        Sets a new price for the e-book.
        """
        self._price = price

    def __str__(self):
        """
        Returns a string representation of the e-book details.
        """
        return self._title, "by", self._author, ", Genre:", self._genre, ", Price: AED", str(self._price)
class Catalog:
    def __init__(self):
        """
        Initializes the Catalog with an empty list of e-books.
        """
        self._ebooks = []

    def add_ebook(self, ebook):
        """
        Adds an e-book to the catalog.
        """
        self._ebooks.append(ebook)

    def remove_ebook(self, ebook):
        """
        Removes an e-book from the catalog.
        """
        if ebook in self._ebooks:
            self._ebooks.remove(ebook)

    def search_ebook(self, title):
        """
        Searches for an e-book by title.
        Returns the e-book if found, else returns None.
        """
        for ebook in self._ebooks:
            if ebook.get_title() == title:
                return ebook
        return None

    def get_ebooks(self):
        """
        Returns the list of e-books in the catalog.
        """
        return self._ebooks

    def set_ebooks(self, ebooks):
        """
        Sets the list of e-books in the catalog.
        """
        self._ebooks = ebooks

class Customer:
    def __init__(self, name, contact_info, loyalty_status=False):
        """
        Initializes a Customer with a name, contact information, and loyalty status.
        """
        self._name = name
        self._contact_info = contact_info
        self._loyalty_status = loyalty_status

    def update_contact_info(self, new_info):
        """
        Updates the customer's contact information.
        """
        self._contact_info = new_info

    def apply_loyalty_discount(self):
        """
        Checks if the customer is eligible for a loyalty discount.
        Returns True if eligible, False otherwise.
        """
        return self._loyalty_status

    def get_name(self):
        """
        Returns the name of the customer.
        """
        return self._name

    def set_name(self, name):
        """
        Sets a new name for the customer.
        """
        self._name = name

    def get_contact_info(self):
        """
        Returns the contact information of the customer.
        """
        return self._contact_info

    def set_contact_info(self, contact_info):
        """
        Sets new contact information for the customer.
        """
        self._contact_info = contact_info

    def get_loyalty_status(self):
        """
        Returns the loyalty status of the customer.
        """
        return self._loyalty_status

    def set_loyalty_status(self, status):
        """
        Sets a new loyalty status for the customer.
        """
        self._loyalty_status = status

class ShoppingCart:
    def __init__(self):
        """
        Initializes an empty shopping cart.

        # Composition Relationship
        # The ShoppingCart is dependent on the Customer class.
        # Each Customer has their own ShoppingCart, which ceases to exist if the Customer is deleted.
        """
        self._items = {}

    def add_item(self, ebook, quantity=1):
        """
        Adds an e-book to the cart with a specified quantity.
        If the e-book already exists in the cart, updates the quantity.
        """
        if ebook in self._items:
            self._items[ebook] += quantity
        else:
            self._items[ebook] = quantity

    def remove_item(self, ebook):
        """
        Removes an e-book from the cart if it exists.
        """
        if ebook in self._items:
            del self._items[ebook]

    def update_quantity(self, ebook, quantity):
        """
        Updates the quantity of a specified e-book in the cart.
        """
        if ebook in self._items:
            self._items[ebook] = quantity

    def calculate_total(self):
        """
        Calculates and returns the total cost of items in the cart.
        """
        total = 0
        for ebook, quantity in self._items.items():
            total += ebook.get_price() * quantity
        return total

    def get_items(self):
        """
        Returns the dictionary of items in the cart.
        """
        return self._items

    def set_items(self, items):
        """
        Sets a new dictionary of items in the cart.
        """
        self._items = items

class Order:
    def __init__(self, order_id, order_date, customer):
        self._order_id = order_id
        self._order_date = order_date
        self._customer = customer
        self._ebooks = []
        self._subtotal = 0.0
        self._discount_amount = 0.0  

    def add_ebooks(self, ebook):
        self._ebooks.append(ebook)
        self._subtotal += ebook.get_price()

    def apply_discounts(self, discount):
        """
        Applies a discount to the order if applicable.
        Stores the discount amount to avoid recalculating it in `calculate_total`.
        """
        if discount.is_applicable(self):
            self._discount_amount = discount.calculate_discount(self)

    def calculate_total(self, with_discount=True):
        """
        Calculates the total with VAT, optionally applying the stored discount.
        """
        # Start with subtotal and apply discount if applicable
        total = self._subtotal - self._discount_amount if with_discount else self._subtotal

        # Apply VAT
        vat_rate = 0.08
        return round(total * (1 + vat_rate), 2)

    def generate_invoice(self):
        return Invoice(self, self.calculate_total())

    def get_order_id(self):
        """
        Returns the order ID.
        """
        return self._order_id

    def set_order_id(self, order_id):
        """
        Sets a new order ID.
        """
        self._order_id = order_id

    def get_order_date(self):
        """
        Returns the order date.
        """
        return self._order_date

    def set_order_date(self, order_date):
        """
        Sets a new order date.
        """
        self._order_date = order_date

    def get_ebooks(self):
        """
        Returns the list of e-books in the order.
        """
        return self._ebooks

    def set_ebooks(self, ebooks):
        """
        Sets a new list of e-books for the order.
        """
        self._ebooks = ebooks


class Invoice:
    def __init__(self, order, amount_due):
        """
        Initializes an Invoice with an associated order and total amount due.

        # Composition Relationship
        # Invoice is part of Order. If the Order is deleted, the Invoice is also deleted.
        """
        self._invoice_id = order.get_order_id()  # Using the order ID as the invoice ID
        self._order = order
        self._amount_due = amount_due

    def display_invoice(self):
        """
        Displays the invoice details, including e-book titles, prices, and the total cost.
        """
        print("Invoice ID:", self._invoice_id)
        print("Order Date:", self._order.get_order_date())
        print("Items:")
        for ebook in self._order.get_ebooks():
            print("-", ebook.get_title(), "Price: AED", ebook.get_price())
        print("Total Amount Due (including VAT): AED", self.calculate_vat())

    def calculate_vat(self):
        """
        Calculates and returns the total amount with VAT included.
        """
        vat_rate = 0.08  # VAT rate of 8%
        return self._amount_due * (1 + vat_rate)

    def get_invoice_id(self):
        """
        Returns the invoice ID.
        """
        return self._invoice_id

    def set_invoice_id(self, invoice_id):
        """
        Sets a new invoice ID.
        """
        self._invoice_id = invoice_id

    def get_amount_due(self):
        """
        Returns the amount due for the invoice.
        """
        return self._amount_due

    def set_amount_due(self, amount_due):
        """
        Sets a new amount due for the invoice.
        """
        self._amount_due = amount_due

