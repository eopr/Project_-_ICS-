class EBook:
    def __init__(self, title, author, publication_date, genre, price):
        """
        Initializes an EBook with title, author, publication date, genre, and price.
        """
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    def get_title(self):
        """
        Returns the title of the e-book.
        """
        return self._title

    def get_author(self):
        """
        Returns the author of the e-book.
        """
        return self._author

    def get_publication_date(self):
        """
        Returns the publication date of the e-book.
        """
        return self._publication_date

    def get_genre(self):
        """
        Returns the genre of the e-book.
        """
        return self._genre

    def get_price(self):
        """
        Returns the price of the e-book.
        """
        return self._price

    def __str__(self):
        """
        Returns a formatted string representation of the e-book details.
        """
        return f"{self._title} by {self._author}, Genre: {self._genre}, Price: AED {self._price:.2f}"

class Catalog:
    def __init__(self):
        """
        Initializes the Catalog with an empty list of e-books.
        """
        self._ebooks = []

    def add_ebook(self, ebook_item):
        """
        Adds an e-book to the catalog.
        """
        self._ebooks.append(ebook_item)

    def remove_ebook(self, ebook_item):
        """
        Removes an e-book from the catalog if it exists.
        """
        if ebook_item in self._ebooks:
            self._ebooks.remove(ebook_item)

    def search_ebook(self, title):
        """
        Searches for an e-book by title.
        Returns the e-book if found, else returns None.
        """
        for ebook_item in self._ebooks:
            if ebook_item.get_title() == title:
                return ebook_item
        return None

    def get_ebooks(self):
        """
        Returns the list of e-books in the catalog.
        """
        return self._ebooks

class Customer:
    def __init__(self, name, contact_info, loyalty_status=False):
        """
        Initializes a Customer with a name, contact information, and loyalty status.
        """
        self._name = name
        self._contact_info = contact_info
        self._loyalty_status = loyalty_status

    def get_name(self):
        """
        Returns the name of the customer.
        """
        return self._name

    def get_contact_info(self):
        """
        Returns the contact information of the customer.
        """
        return self._contact_info

    def get_loyalty_status(self):
        """
        Returns the loyalty status of the customer.
        """
        return self._loyalty_status

    def set_loyalty_status(self, status):
        """
        Sets a new loyalty status for the customer.
        """
        self._loyalty_status = status

class ShoppingCart:
    def __init__(self):
        """
        Initializes an empty shopping cart.
        """
        self._items = {}

    def add_item(self, ebook_item, quantity=1):
        """
        Adds an e-book to the cart with a specified quantity.
        If the e-book already exists in the cart, updates the quantity.
        """
        if ebook_item in self._items:
            self._items[ebook_item] += quantity
        else:
            self._items[ebook_item] = quantity

    def remove_item(self, ebook_item):
        """
        Removes an e-book from the cart if it exists.
        """
        if ebook_item in self._items:
            del self._items[ebook_item]

    def update_quantity(self, ebook_item, quantity):
        """
        Updates the quantity of a specified e-book in the cart.
        """
        if ebook_item in self._items:
            self._items[ebook_item] = quantity

    def calculate_total(self):
        """
        Calculates and returns the total cost of items in the cart.
        """
        total = 0
        for ebook_item, quantity in self._items.items():
            total += ebook_item.get_price() * quantity
        return total

    def get_items(self):
        """
        Returns the dictionary of items in the cart.
        """
        return self._items

class Order:
    def __init__(self, order_id, order_date, customer):
        """
        Initializes an Order with an order ID, order date, customer, subtotal, and discount amount.
        """
        self._order_id = order_id
        self._order_date = order_date
        self._customer = customer
        self._ebooks = []
        self._subtotal = 0.0
        self._discount_amount = 0.0

    def add_ebook(self, ebook_item):
        """
        Adds an e-book to the order and updates the subtotal.
        """
        self._ebooks.append(ebook_item)
        self._subtotal += ebook_item.get_price()

    def apply_discounts(self, discount):
        """
        Applies a discount to the order if applicable and calculates the discount amount.
        """
        if discount.is_applicable(self):
            self._discount_amount = discount.calculate_discount(self)

    def calculate_total(self, with_discount=True):
        """
        Calculates the total amount due by applying any discounts and VAT on the subtotal.
        """
        discounted_total = self._subtotal - self._discount_amount if with_discount else self._subtotal
        vat_rate = 0.08
        total_with_vat = round(discounted_total * (1 + vat_rate), 2)
        return total_with_vat

    def generate_invoice(self):
        """
        Generates an invoice for the order, detailing items, prices, and the total amount due with VAT.
        """
        return Invoice(self, self.calculate_total())

    def get_order_id(self):
        """
        Returns the order ID.
        """
        return self._order_id

    def get_order_date(self):
        """
        Returns the order date.
        """
        return self._order_date

    def get_ebooks(self):
        """
        Returns the list of e-books in the order.
        """
        return self._ebooks

    def get_subtotal(self):
        """
        Returns the subtotal before any discounts or VAT.
        """
        return self._subtotal

    def get_discount_amount(self):
        """
        Returns the calculated discount amount for the order.
        """
        return self._discount_amount

    def get_customer(self):
        """
        Returns the customer associated with this order.
        """
        return self._customer

class Invoice:
    def __init__(self, order, amount_due):
        """
        Initializes an Invoice with an associated order and the final total amount due.
        """
        self._invoice_id = order.get_order_id()
        self._order = order
        self._amount_due = amount_due

    def display_invoice(self):
        """
        Displays the full invoice details, including e-book titles, subtotal, discount, VAT, and total amount due.
        """
        print("Invoice ID:", self._invoice_id)
        print("Order Date:", self._order.get_order_date())
        print("Items:")
        for ebook_item in self._order.get_ebooks():  # Renamed to avoid shadowing
            print("-", ebook_item.get_title(), "Price: AED", f"{ebook_item.get_price():.2f}")

        # Fetch values using getters to avoid direct access to protected members
        subtotal = self._order.get_subtotal()
        discount = self._order.get_discount_amount()
        vat = round((subtotal - discount) * 0.08, 2)
        total_due = self._amount_due

        print("\nSubtotal: AED", f"{subtotal:.2f}")
        print("Discount Applied: AED", f"{discount:.2f}")
        print("VAT (8%): AED", f"{vat:.2f}")
        print("Total Amount Due (including VAT): AED", f"{total_due:.2f}")

    def calculate_vat(self):
        """
        Returns the VAT amount on the discounted subtotal, rounded to two decimal places.
        """
        vat_rate = 0.08  # VAT rate of 8%
        return round((self._order.get_subtotal() - self._order.get_discount_amount()) * vat_rate, 2)

    def get_invoice_id(self):
        """
        Returns the invoice ID.
        """
        return self._invoice_id

    def set_invoice_id(self, invoice_id):
        """
        Sets a new invoice ID.
        """
        self._invoice_id = invoice_id

    def get_amount_due(self):
        """
        Returns the total amount due for the invoice.
        """
        return self._amount_due

    def set_amount_due(self, amount_due):
        """
        Sets a new total amount due for the invoice.
        """
        self._amount_due = amount_due

class Discount:
    def __init__(self, discount_type, discount_amount):
        """
        Initializes a Discount with a type and amount.
        """
        self._discount_type = discount_type
        self._discount_amount = discount_amount

    def calculate_discount(self, order):
        """
        Calculates the discount based on the order's subtotal (before VAT).
        """
        return order.get_subtotal() * (self._discount_amount / 100)

    def is_applicable(self, order):
        """
        Determines if the discount is applicable:
        - 'loyalty' applies if the customer has loyalty status.
        - 'bulk' applies if there are 5 or more items in the order.
        """
        if self._discount_type == "loyalty":
            # Access customer via getter method
            return order.get_customer().get_loyalty_status()
        elif self._discount_type == "bulk":
            # Check if the order has 5 or more e-books
            return len(order.get_ebooks()) >= 5
        return False


print("______________________________________________________________________________________________")
# Create several EBook instances
ebook1 = EBook("Pigeon Precision: Training Birds to Target with Thermal Imaging", "Ibrahim", "2024", "Advanced Warfare", 500)
ebook2 = EBook("Debugging with a Magnifying Glass: The Beginner’s Guide", "Ibrahim", "2022", "Programming", 99)
ebook3 = EBook("How to Train Your Cat to Code in Python", "Ibrahim", "2023", "Programming", 120)
ebook4 = EBook("The Art of Writing Code in Complete Silence", "Ibrahim", "2021", "Coding", 80)
ebook5 = EBook("Extreme Programming Under Water: A Guide for Coders Who SCUBA", "Ibrahim", "2020", "Coding", 200)
ebook6 = EBook("How to Build a Website That Only Works on Tuesdays", "Ibrahim", "2025", "Web Design", 75)

# Create a Catalog and add e-books to it
catalog = Catalog()
catalog.add_ebook(ebook1)
catalog.add_ebook(ebook2)
catalog.add_ebook(ebook3)
catalog.add_ebook(ebook4)
catalog.add_ebook(ebook5)
catalog.add_ebook(ebook6)

# Display the catalog contents
print("Available EBooks in Catalog:")
for ebook in catalog.get_ebooks():
    print(ebook.__str__())
print("______________________________________________________________________________________________")

# Test 1: Customer Abdulla without loyalty buying 2 books (No Discount)
print("Test 1: Customer Abdulla without loyalty buying 2 books")
customer1 = Customer("Abdulla", "Abdulla@abdulla.adbulla", False)
order1 = Order("0001", "2024-10-30", customer1)
order1.add_ebook(ebook1)
order1.add_ebook(ebook2)
invoice1 = order1.generate_invoice()
invoice1.display_invoice()
print("______________________________________________________________________________________________")
print("")
# Test 2: Customer Jasem with loyalty buying 1 book (Loyalty Discount)
print("Test 2: Customer Jasem with loyalty buying 1 book")
customer2 = Customer("Jasem", "Jasem@jasem.jasem", True)
order2 = Order("0002", "2024-10-31", customer2)
order2.add_ebook(ebook3)
loyalty_discount = Discount("loyalty", 10)  # 10% loyalty discount
order2.apply_discounts(loyalty_discount)
invoice2 = order2.generate_invoice()
invoice2.display_invoice()
print("______________________________________________________________________________________________")
print("")
# Test 3: Customer Ibrahim without loyalty buying 5 books (Bulk Discount)
print("Test 3: Customer Ibrahim without loyalty buying 5 books (Bulk Discount)")
customer3 = Customer("Ibrahim", "Ibrahim@ibrahim.ibrahim", False)
order3 = Order("0003", "2024-11-01", customer3)
order3.add_ebook(ebook1)
order3.add_ebook(ebook2)
order3.add_ebook(ebook3)
order3.add_ebook(ebook4)
order3.add_ebook(ebook5)
bulk_discount = Discount("bulk", 20)  # 20% bulk discount
order3.apply_discounts(bulk_discount)
invoice3 = order3.generate_invoice()
invoice3.display_invoice()
